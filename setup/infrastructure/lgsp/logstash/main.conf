input {
        beats {
                port => 5044
                ssl => true
                # ssl_certificate => "/etc/pki/tls/certs/logstash-beats.crt"
                # ssl_key => "/etc/pki/tls/private/logstash-beats.key"
        }
}
filter {
    if "apim_logs" in [tags] {
        grok {
            match => ["message", "%{GREEDYDATA:UNWANTED}\ apimMetrics:%{GREEDYDATA:apimMetrics}\, %{GREEDYDATA:UNWANTED} \:%{GREEDYDATA:properties}"]
        }  
        json {
            source => "properties"
        }
        # Geo ip filter to transform the IP address to location.
        geoip {
            ecs_compatibility => disabled
            source => "[userIp]"
        } 
        # Geo IP failure to lookup or local address.
        if "_geoip_lookup_failure" in [tags] {
            mutate {
                add_field => { "[geoip][country_name]" => "N/A" }
            }
        }  
        mutate {
            add_field => { "logtime" => " %{requestTimestamp}â €" }
            convert => ["logtime","string"] 
        }
        translate {
            source => "[geoip][city_name]"
            target => "[city_name]"
            dictionary_path =>  "/etc/logstash/config/dictionary/city_name.csv"
            fallback => "%{[geoip][city_name]}"
        }
        translate {
            source => "[geoip][country_name]"
            target => "[country_name]"
            dictionary_path =>  "/etc/logstash/config/dictionary/country_name.csv"
            fallback => "%{[geoip][country_name]}"
        }
    }
    if "is_logs" in [tags] {
        if " Event:" not in [message] {
        drop {} 
        }

        mutate {
            gsub => [
            "message", "LOCAL", "Resident"
            ]
        }

        # Date format parse.
        grok {
            ecs_compatibility => disabled
            match => {
                'message' => '\[%{TIMESTAMP_ISO8601:logtime}\].*Unique ID: %{GREEDYDATA:eventType},\n Event: %{GREEDYDATA:eventdata}'
            }
        }

        json {
            ecs_compatibility => disabled
            source => "eventdata"
            remove_field => ["eventdata","message"]
        }

        # Ruby code to convert the comma seperated roles into an array.
        ruby{
            code =>"

            # Method to split the supplied string by comma, trim whitespace and return an array.
            def mapStringToArray(strFieldValue)

            # If string is not null, return array.
            if (strFieldValue != nil)
                fieldArr =  strFieldValue.split(',').map(&:strip).reject(&:empty?).uniq 
                return fieldArr                             
            end

            # Return empty array if string is nil.
            return []
            end

            vrtArr = mapStringToArray(event.get('[event][payloadData][rolesCommaSeparated]'))
            if vrtArr.length > 0                           
                event.set('[event][payloadData][rolesCommaSeparated]', vrtArr)
            end

            event_array = []
            event_type = event.get('[event][payloadData][eventType]')
            idp_type = event.get('[event][payloadData][identityProviderType]')
            auth_step_success = event.get('[event][payloadData][authStepSuccess]')
            if (event_type == 'overall' || auth_step_success == false)
                event_array.push('Overall')
            end
            if (event_type == 'step')
                if (idp_type == 'Resident')
                    event_array.push('Resident')
                end
                if (idp_type == 'FEDERATED')
                    event_array.push('Federated')
                end
            end
            event.set('[event][payloadData][event_type_filter]', event_array)
            "
        }

        # Take log time as the timestamp.
        date {
            match => [ "logtime" , "yyyy-MM-dd HH:mm:ss,SSS" ]
            target => "@timestamp"
        }

        # Session specific.
        if [eventType] == "session" {

            # User agent filter to transform the userAgent string into seperated fields.
            useragent {
                ecs_compatibility => disabled
                source => "[event][payloadData][userAgent]"
                target => "userAgentDetails"
            }

            date {
                match => [ "[event][payloadData][startTimestamp]" , "UNIX_MS" ]
                target => "startTime"
            }

            date {
                match => [ "[event][payloadData][terminationTimestamp]" , "UNIX_MS" ]
                target => "endTime"
            }

        } else if [eventType] == "auth" {

            # Geo ip filter to transform the IP address to location.
            geoip {
                ecs_compatibility => disabled
                source => "[event][payloadData][remoteIp]"
            }

            # Geo IP failure to lookup or local address.
            if "_geoip_lookup_failure" in [tags] {
                mutate {
                    add_field => { "[geoip][country_name]" => "N/A" }
                }
            }
            
            translate {
                source => "[geoip][city_name]"
                target => "[city_name]"
                dictionary_path =>  "/etc/logstash/config/dictionary/city_name.csv"
                fallback => "%{[geoip][city_name]}"
            }
            translate {
                source => "[geoip][country_name]"
                target => "[country_name]"
                dictionary_path =>  "/etc/logstash/config/dictionary/country_name.csv"
                fallback => "%{[geoip][country_name]}"
            }
            translate {
                source => "[event][serviceProvider]"
                target => "[serviceProvider]"
                dictionary_path =>  "/etc/logstash/config/dictionary/am_application.csv"
                fallback => "%{[event][serviceProvider]}"
            }
        }
    }
}
output {
    stdout { codec => rubydebug }
    if "apim_logs" in [tags] {
        if [apimMetrics] == " apim:response" {
            elasticsearch {
                hosts => ["es_master"]
                user => "elastic"
                password => "Admin@00vsp"
                index => "apim_event_response"
            }
        } else if [apimMetrics] == " apim:faulty" {
            elasticsearch {
                hosts => ["es_master"]
                user => "elastic"
                password => "Admin@00vsp"
                index => "apim_event_faulty"
            }
        }
    }
    if "is_logs" in [tags] {
        if [eventType] == "auth"{
		elasticsearch {
			hosts => ["es_master"]
            user => "elastic"
            password => "Admin@00vsp"
			index => "wso2-iam-auth-raw"
			document_id => "%{[event][payloadData][eventId]}"
		}
        } else if [eventType] == "session"{
            elasticsearch {
                hosts => ["es_master"]
                user => "elastic"
                password => "Admin@00vsp"
                index => "wso2-iam-session-raw"
                document_id => "%{[event][payloadData][sessionId]}"
            }
            elasticsearch {
                hosts => ["es_master"]
                user => "elastic"
                password => "Admin@00vsp"
                index => "wso2-iam-session-time-series"
            }
        } else  {
            elasticsearch {
                hosts => ["es_master"]
                user => "elastic"
                password => "Admin@00vsp"
                index => "wso2-iam-other"
            }
        }
    }
}
